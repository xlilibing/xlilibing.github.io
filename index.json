[{"content":"last test ","permalink":"https://lilibing.github.io/posts/last_test/","summary":"last test ","title":"Last_test"},{"content":"test one ","permalink":"https://lilibing.github.io/posts/test_one/","summary":"test one ","title":"Test_one"},{"content":"this a new_one markdown for test blog.sh ","permalink":"https://lilibing.github.io/posts/new_one/","summary":"this a new_one markdown for test blog.sh ","title":"New_one"},{"content":"Maevn简介  Maven 是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。 Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。\n 1.Maven约定配置 Maven默认配置\n 一个 maven 项目在默认情况下会产生 JAR 文件，另外 ，编译后 的 classes 会放在 ${basedir}/target/classes 下面， JAR 文件会放在 ${basedir}/target 下面。 archetype:generate 目标会列出一系列的 archetype 让你选择。 Archetype 可以理解成项目的模型。Maven 为我们提供了很多种的项目模型，包括从简单的 Swing 到复杂的 Web 应用 当你第一次运行 maven 的时候，它会从网上的 maven 库 (repository) 下载需要的程序，存放在你电脑的本地库 (local repository) 中，所以这个时候你需要有 Internet 连接。Maven 默认的本地库是 ~/.m2/repository/，在 Windows 下是 %USER_HOME%.m2\\repository\\ 。  2.POM 一个项目所有的配置都放置在 POM 文件中：定义项目的类型、名字，管理依赖关系，定制插件的行为等等。比如说，你可以配置 compiler 插件让它使用 java 1.5 来编译。\n 在 POM 中，groupId, artifactId, packaging, version 叫作 maven 坐标，它能唯一的确定一个项目。有了 maven 坐标，我们就可以用它来指定我们的项目所依赖的其他项目，插件，或者父项目。  POM配置\n3.Maven插件 我们使用 mvn archetype:generate 命令来生成一个项目。archetype 是一个插件的名字，generate是目标(goal)的名字。这个命令的意思是告诉 maven 执行 archetype 插件的 generate 目标。插件目标通常会写成 pluginId:goalId\n一个目标是一个工作单元，而插件则是一个或者多个目标的集合。比如说Jar插件，Compiler插件，Surefire插件等。从看名字就能知道，Jar 插件包含建立Jar文件的目标， Compiler 插件包含编译源代码和单元测试代码的目标。Surefire 插件的话，则是运行单元测试\n看到这里，估计你能明白了，mvn 本身不会做太多的事情，它不知道怎么样编译或者怎么样打包。它把构建的任务交给插件去做。插件定义了常用的构建逻辑，能够被重复利用。这样做的好处是，一旦插件有了更新，那么所有的 maven 用户都能得到更新。\n4.Maven生命周期 mvn package。这里的 package 是一个maven的生命周期阶段 (lifecycle phase )。生命周期指项目的构建过程，它包含了一系列的有序的阶段 (phase)，而一个阶段就是构建过程中的一个步骤。\n那么生命周期阶段和上面说的插件目标之间是什么关系呢？插件目标可以绑定到生命周期阶段上。一个生命周期阶段可以绑定多个插件目标。当 maven 在构建过程中逐步的通过每个阶段时，会执行该阶段所有的插件目标。\nmaven 能支持不同的生命周期，但是最常用的是默认的Maven生命周期 (default Maven lifecycle )。如果你没有对它进行任何的插件配置或者定制的话，那么上面的命令 mvn package 会依次执行默认生命周期中直到包括 package 阶段前的所有阶段的插件目标：\n5.Maven依赖管理 maven 坐标能够确定一个项目。换句话说，我们可以用它来解决依赖关系。在 POM 中，依赖关系是在 dependencies 部分中定义的。\n例如，我们用 dependencies 定义了对于 junit 的依赖：\n\u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupid\u0026gt;junit\u0026lt;/groupid\u0026gt; \u0026lt;artifactid\u0026gt;junit\u0026lt;/artifactid\u0026gt; \u0026lt;version\u0026gt;3.8.1\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; 这个例子很简单，但是实际开发中我们会有复杂得多的依赖关系，因为被依赖的 jar 文件会有自己的依赖关系。那么我们是不是需要把那些间接依赖的 jar 文件也都定义在POM中呢？答案是不需要，因为 maven 提供了传递依赖的特性。\n6.Maven库 当第一次运行 maven 命令的时候，你需要 Internet 连接，因为它要从网上下载一些文件。那么它从哪里下载呢？它是从 maven 默认的远程库(http://repo1.maven.org/maven2) 下载的。这个远程库有 maven 的核心插件和可供下载的 jar 文件。\n除了从远程仓库中下载，我们同样可以构建自己的Maven仓库。Maven在下载远程库中的文件之前都会先查询本地库。本地库是指 maven 下载了插件或者 jar 文件后存放在本地机器上的拷贝。在 Linux 上，它的位置在 ~/.m2/repository，在 Windows XP 上，在 C:\\Documents and Settings\\username.m2\\repository ，在 Windows 7 上，在 C:\\Users\\username.m2\\repository。当 maven 查找需要的 jar 文件时，它会先在本地库中寻找，只有在找不到的情况下，才会去远程库中找。\n运行mvn install来讲项目安装到本地库。一旦一个项目被安装到了本地库后，你别的项目就可以通过 maven 坐标和这个项目建立依赖关系。\n我就可以如下所示来建立依赖关系：\n\u0026lt;dependency\u0026gt; \u0026lt;groupid\u0026gt;com.mycompany.helloworld\u0026lt;/groupid\u0026gt; \u0026lt;artifactid\u0026gt;helloworld\u0026lt;/artifactid\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ","permalink":"https://lilibing.github.io/posts/init/","summary":"Maevn简介  Maven 是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。 Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。\n 1.Maven约定配置 Maven默认配置\n 一个 maven 项目在默认情况下会产生 JAR 文件，另外 ，编译后 的 classes 会放在 ${basedir}/target/classes 下面， JAR 文件会放在 ${basedir}/target 下面。 archetype:generate 目标会列出一系列的 archetype 让你选择。 Archetype 可以理解成项目的模型。Maven 为我们提供了很多种的项目模型，包括从简单的 Swing 到复杂的 Web 应用 当你第一次运行 maven 的时候，它会从网上的 maven 库 (repository) 下载需要的程序，存放在你电脑的本地库 (local repository) 中，所以这个时候你需要有 Internet 连接。Maven 默认的本地库是 ~/.","title":"Init"},{"content":"first page 你好世界，你好！\n","permalink":"https://lilibing.github.io/posts/first-page/","summary":"first page 你好世界，你好！","title":"My 1st post"},{"content":"test hugo [toc]\nsdlsfgdf dsfjfdskg    First Header Second Header     Content Cell Content Cell   Content Cell Content Cell    ","permalink":"https://lilibing.github.io/posts/test/","summary":"test hugo [toc]\nsdlsfgdf dsfjfdskg    First Header Second Header     Content Cell Content Cell   Content Cell Content Cell    ","title":"test hugo"},{"content":"test copy hugo ","permalink":"https://lilibing.github.io/posts/test-copy/","summary":"test copy hugo ","title":"test copy hugo"},{"content":"test copy hugaaaaaaaaaaaafsdjgksjajgkljgkla;dsfkgs;dfo fdsgkjs;gsd;f sdgl;sdkfl;sd\n","permalink":"https://lilibing.github.io/posts/test-copy-2/","summary":"test copy hugaaaaaaaaaaaafsdjgksjajgkljgkla;dsfkgs;dfo fdsgkjs;gsd;f sdgl;sdkfl;sd","title":"test copy hugo1"}]